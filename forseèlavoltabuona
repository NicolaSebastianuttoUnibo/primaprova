#include "Particle.hpp"
#include <TH1F.h>
#include <TCanvas.h>




void mmm(){




gRandom->SetSeed();




//Particle pt("ci",5,5,5);




ParticleType pip("pione+",4,5);
ParticleType pim("pione-",4,5);
ParticleType kap("kaone-",4,5);
ParticleType kam("kaone-",4,5);
ParticleType prp("protone+",4,5);
ParticleType prm("protone-",4,5);
ResonanceType r1("risonanza",4,5,6);
ResonanceType r2("risonanza34234",466666,5,6);






Particle::AddParticleType( "pione+",4,5,6);


int n=Particle::fParticleType.size();
std::cout<<n<<"\n";


Particle::AddParticleType( "pione-",4,5,0);
Particle::AddParticleType( "kaone+",4,5,0);
Particle::AddParticleType( "kaone-",4,5,0);
n=Particle::fParticleType.size();
std::cout<<n<<"\n";
Particle::AddParticleType( "kaone-",4,5,0);
//if(kap==kam){std::cout<<"uguali";}
Particle::AddParticleType( "protone+",4,5,6);
Particle::AddParticleType( "protone-",4,5,6);
Particle::AddParticleType( "risonanza",4,5,6);
n=Particle::fParticleType.size();
std::cout<<n<<"\n";




TH1F *h1 = new TH1F("tipi di particelle","Title", Particle::fParticleType.size(), 0, Particle::fParticleType.size());
TH1F *h2 = new TH1F("angoli azitumali","Title", 10, 0,6.18);
TH1F *h3 = new TH1F("angoli polari","Title", 10, 0,3.14);
TH1F *h4 = new TH1F("impulso","Title", 10,0,1e9*2);
TH1F *h5 = new TH1F("impulso morto trasverso","Title", 10,0,1e9*2);
TH1F *h6 = new TH1F("energia","Title", 10,0,1e9*2);
TH1F *h7 = new TH1F("invariante di massa","Title", 1000,0,1e10);
TH1F *h8 = new TH1F("massa invarianti di particelle discorde","Title", 1000,0,1e9);













Particle EventParticles[120];
 for (int i=0;i<5;i++)
{
 int count=0;
   for(int j=0;j<100; j++) // qlz: sicuramente darÃ  problemi
   {
    
   double x=gRandom->Rndm();
  
    Particle p("gg",3,3,3);
   if(x<0.4)
   {p.SetfIndex(1);
   //std::cout<< x;
   h1->Fill(0);
   }
  
   else if(x<0.8)
   {
    p.SetfIndex(2);  
   // std::cout<< x;
   h1->Fill(1);
   }
   else if(x<0.85)
   {
    p.SetfIndex(3); 
    //std::cout<< x;
    h1->Fill(2);
   }
   else if(x<0.9)
   {
    p.SetfIndex(4);
   // std::cout<< x; 
   h1->Fill(3);
   }
   else if(x<0.945)
   {
    p.SetfIndex(5);  
    //std::cout<< x;
    h1->Fill(4);
   }
   else if(x<0.99)
   {
    p.SetfIndex(6);
    //std::cout<< x;
    h1->Fill(5); 
   }
  
   else
   {
    
    
     //std::cout<< x;
    double y=gRandom->Rndm();
     if(y<0.5)
     {


      
        Particle* a= new Particle("pione+",1,1,1);
       Particle* b=new Particle("kaone-",1,1,1);
      
       //b->findParticle("")
      // a->Setter("pione+");
       b->Setter("kaone-");
       std::cout<<"index b:"<<b->fIndex<<",";
      
      int c=a->GetMassParticle();
      std::cout<< c;
     
       int z=p.Decay2body(*a, *b);
       delete a;
       delete b;
      
       if(i==0)
       {
          EventParticles[100+count]=*a;
          EventParticles[101+count]=*b;
            count+=2;
       }
    


    h1->Fill(6);


     }


     else{


      
       Particle a("pione-",1,1,1);
       Particle b("kaone+",1,1,1);
       a.Setter("pione-");
       b.Setter("kaone+");
       int z=p.Decay2body(a, b);
       if(z==0)
       {
          EventParticles[100+count]=a;
          EventParticles[101+count]=b;
            count+=2;
      


     }
    p.SetfIndex(7); 


   }




    h1->Fill(7);


   }//fine else
    




double phi=gRandom->Uniform(0,2*3.14);
double theta=gRandom->Uniform(0,3.14);
    h2->Fill(phi); 
    h3->Fill(theta); 






double impulse=gRandom->Exp(1e9);
p.SetP(impulse*sin(theta)*cos(phi),impulse*sin(theta)*sin(phi),impulse*cos(theta));
EventParticles[j].SetP(impulse*sin(theta)*cos(phi),impulse*sin(theta)*sin(phi),impulse*cos(theta));
h4->Fill(p.GetImpulse());
h5->Fill(std::sqrt(p.GetPx()*p.GetPx()  +p.GetPy()*p.GetPy()          ));
h6->Fill(p.GetEnergy());



  }//fine secondo for (j)


for(int m=0;m<100+count;m++){
for(int n=m+1;n<100+count;n++){
double invmass=EventParticles[m].InvMass(EventParticles[n]);
h7->Fill(invmass);


}
}







} ///fine primo for (i)






















std::cout <<"\n er brother";


TCanvas*canvas=new TCanvas("canvas  1","Canvas",800,500);
h1->Draw();
canvas->Draw();


TCanvas*canvas2=new TCanvas("canvas 2","Canvas",800,500);


h2->Draw();
canvas2->Draw();


TCanvas*canvas3=new TCanvas("canvas 3 ","Canvas",800,500);
h3->Draw();
canvas3->Draw();


TCanvas*canvas4=new TCanvas("canvas 4 ","Canvas",800,500);
h4->Draw();
canvas4->Draw();


TCanvas*canvas5=new TCanvas("canvas 5 ","Canvas",800,500);
h5->Draw();
canvas5->Draw();


TCanvas*canvas6=new TCanvas("canvas 6 ","Canvas",800,500);
h6->Draw();
canvas6->Draw();


TCanvas*canvas7=new TCanvas("canvas 7 ","Canvas",800,500);
h7->Draw();
canvas7->Draw();




}
